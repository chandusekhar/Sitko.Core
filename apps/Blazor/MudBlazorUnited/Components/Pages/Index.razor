@page "/"
@using MudBlazorUnited.Data.Entities
@attribute [RenderModeInteractiveServer]
@inherits BaseComponent

<MudGrid>
    <MudItem xs="6" sm="4">
        <MudAutocomplete @ref="IdFilterAutocomplete" T="BarModel" Label="ID" SearchFunc="@SearchIdsAsync" ResetValueOnEmptyText="true"
                         Value="FilterList.Model"
                         ToStringFunc="@(e => e == null ? null : $"{e.Bar}")"
                         ValueChanged="@(s => ChangeIdAsync(s == null ? null : s.Id))"/>
    </MudItem>

    <MudItem xs="6" sm="4">
         <MudTextField T="string" Value="FilterList.Title" Label="Title" ValueChanged="SearchTitleAsync" Class="mt-0" Clearable="true">
                                                                            </MudTextField>
    </MudItem>

    <MudItem xs="12" sm="4">
        <MudDateRangePicker DateRange="FilterList.DateRange" Label="Дата" PickerVariant="PickerVariant.Dialog" DateRangeChanged="@(dateRange => ChangeDateAsync(dateRange))"/>
    </MudItem>
</MudGrid>

<MudPageLayout Title="@LocalizationProvider["Title"]">
    <BarRepositoryList @bind-RowsPerPage="rowsPerPage" OnDataLoaded="CountSummaryAsync" @ref="barList" Class="mb-10" EnableUrlNavigation="true"
                       ConfigureQuery="ConfigureQueryAsync" AddParamsToUrl="AddParamsToUrlAsync"
                       GetParamsFromUrl="GetParamsFromUrlAsync">
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortLabel="@nameof(BarModel.Id)" InitialDirection="SortDirection.Descending" T="BarModel">Id</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="@nameof(BarModel.Bar)" T="BarModel">Название</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="@nameof(BarModel.Date)" T="BarModel">Дата</MudTableSortLabel>
            </MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <ChildContent>
            <MudTd DataLabel="@nameof(BarModel.Id)">
                <MudLink Href="@($"/Bars/{context.Id}/Edit")">@context.Id</MudLink>
            </MudTd>
            <MudTd DataLabel="@nameof(BarModel.Bar)">
                @context.Bar
            </MudTd>
            <MudTd DataLabel="@nameof(BarModel.Date)">
                @context.Date
            </MudTd>
            <MudTd>
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Size="Size.Small" StartIcon="@Icons.Material.Filled.Refresh" OnClick="@(() => barList.UpdateAsync(context))">Refresh</MudButton>
            </MudTd>
        </ChildContent>
        <FooterContent>
            <MudTFootRow Class="bold-text">
                <MudTd>@Summary</MudTd>
            </MudTFootRow>
        </FooterContent>
    </BarRepositoryList>
</MudPageLayout>

@* <BarForm Layout="@FormLayout.Vertical" EntityId="Bar!.Id" @ref="frm"> *@
@* <AntDesign.FormItem Label="Single small image"> *@
@*     <AntStorageImageInput Storage="@Storage" *@
@*                           Size="small" *@
@*                           MaxFileSize="@(2 * 1024 * 1024)" *@
@*                           UploadPath="bars" *@
@*                           GenerateMetadata="@((_, _) => GenerateMetadataAsync())" *@
@*                           @bind-Value="context.Entity.StorageItem" *@
@*                           OnChange="@(_ => { Logger.LogInformation("File uploaded"); return Task.CompletedTask;})"> *@
@*     </AntStorageImageInput> *@
@* </AntDesign.FormItem> *@
@* <AntDesign.FormItem Label="Single large image"> *@
@*     <AntStorageImageInput Storage="@Storage" *@
@*                           Size="large" *@
@*                           MaxFileSize="@(2 * 1024 * 1024)" *@
@*                           UploadPath="bars" *@
@*                           GenerateMetadata="@((_, _) => GenerateMetadataAsync())" *@
@*                           @bind-Value="context.Entity.StorageItem" *@
@*                           OnChange="@(_ => { Logger.LogInformation("File uploaded"); return Task.CompletedTask;})"> *@
@*     </AntStorageImageInput> *@
@* </AntDesign.FormItem> *@
@* <FormItem Label="Multiple images"> *@
@*     <AntStorageImagesInput *@
@*         TValue="ValueCollection<StorageItem>" *@
@*         Storage="@Storage" *@
@*         MaxFileSize="@(2 * 1024 * 1024)" *@
@*         UploadPath="bars" *@
@*         GenerateMetadata="@((_, _) => GenerateMetadataAsync())" *@
@*         @bind-Value="context.Entity.StorageItems" *@
@*         OnChange="@(values => { Logger.LogInformation("Files uploaded: {Count}", values?.Count ?? 0); return Task.CompletedTask;})"> *@
@*     </AntStorageImagesInput> *@
@* </FormItem> *@
@* <FormItem Label="Multiple images with custom upload button"> *@
@*     <AntStorageImagesInput Storage="@Storage" *@
@*                            TValue="ValueCollection<StorageItem>" *@
@*                            MaxFileSize="@(2 * 1024 * 1024)" *@
@*                            MaxFiles="10" *@
@*                            UploadPath="bars" *@
@*                            GenerateMetadata="@((_, _) => GenerateMetadataAsync())" *@
@*                            @bind-Value="context.Entity.StorageItems" *@
@*                            OnChange="@(values => { Logger.LogInformation("Files uploaded: {Count}", values?.Count() ?? 0); return Task.CompletedTask;})"> *@
@*         <CustomUploadButton Context="input"> *@
@*             <Button OnClick="@(_ => { input.SetValue(new ValueCollection<StorageItem> { context.Entity.StorageItem! }); })">Set items</Button> *@
@*         </CustomUploadButton> *@
@*     </AntStorageImagesInput> *@
@* </FormItem> *@
@* <FormItem Label="Multiple images with custom upload"> *@
@*     <AntStorageImagesInput Storage="@Storage" *@
@*                            TValue="ValueCollection<StorageItem>" *@
@*                            MaxFileSize="@(2 * 1024 * 1024)" *@
@*                            MaxFiles="10" *@
@*                            UploadPath="bars" *@
@*                            GenerateMetadata="@((_, _) => GenerateMetadataAsync())" *@
@*                            @bind-Value="context.Entity.StorageItems" *@
@*                            CustomUpload="@(_ => { return Task.FromResult(new ValueCollection<StorageItem> { context.Entity.StorageItem! }); })" *@
@*                            OnChange="@(values => { Logger.LogInformation("Files uploaded: {Count}", values?.Count() ?? 0); return Task.CompletedTask;})"> *@
@*     </AntStorageImagesInput> *@
@* </FormItem> *@
@* $1$ AVATARS #1# *@
@* <AntDesign.FormItem Label="Single avatar"> *@
@*     <AntStorageImageInput Storage="@Storage" *@
@*                           Avatar="true" *@
@*                           MaxFileSize="@(2 * 1024 * 1024)" *@
@*                           UploadPath="bars" *@
@*                           GenerateMetadata="@((_, _) => GenerateMetadataAsync())" *@
@*                           @bind-Value="context.Entity.StorageItem" *@
@*                           OnChange="@(_ => { Logger.LogInformation("File uploaded"); return Task.CompletedTask;})"> *@
@*     </AntStorageImageInput> *@
@* </AntDesign.FormItem> *@
@* <AntDesign.FormItem Label="Single small avatar"> *@
@*     <AntStorageImageInput Storage="@Storage" *@
@*                           Avatar="true" *@
@*                           Size="small" *@
@*                           MaxFileSize="@(2 * 1024 * 1024)" *@
@*                           UploadPath="bars" *@
@*                           GenerateMetadata="@((_, _) => GenerateMetadataAsync())" *@
@*                           @bind-Value="context.Entity.StorageItem" *@
@*                           OnChange="@(_ => { Logger.LogInformation("File uploaded"); return Task.CompletedTask;})"> *@
@*     </AntStorageImageInput> *@
@* </AntDesign.FormItem> *@
@* <AntDesign.FormItem Label="Single large avatar"> *@
@*     <AntStorageImageInput Storage="@Storage" *@
@*                           Avatar="true" *@
@*                           Size="large" *@
@*                           MaxFileSize="@(2 * 1024 * 1024)" *@
@*                           UploadPath="bars" *@
@*                           GenerateMetadata="@((_, _) => GenerateMetadataAsync())" *@
@*                           @bind-Value="context.Entity.StorageItem" *@
@*                           OnChange="@(_ => { Logger.LogInformation("File uploaded"); return Task.CompletedTask;})"> *@
@*     </AntStorageImageInput> *@
@* </AntDesign.FormItem> *@
@* <FormItem Label="Multiple avatars"> *@
@*     <AntStorageImagesInput *@
@*         TValue="ValueCollection<StorageItem>" *@
@*         Avatar="true" *@
@*         Storage="@Storage" *@
@*         MaxFileSize="@(2 * 1024 * 1024)" *@
@*         UploadPath="bars" *@
@*         GenerateMetadata="@((_, _) => GenerateMetadataAsync())" *@
@*         @bind-Value="context.Entity.StorageItems" *@
@*         OnChange="@(values => { Logger.LogInformation("Files uploaded: {Count}", values?.Count ?? 0); return Task.CompletedTask;})"> *@
@*     </AntStorageImagesInput> *@
@* </FormItem> *@
@* $1$ AVATARS END #1# *@
@* <FormItem Label="Single file"> *@
@*     <AntStorageFileInput Storage="@Storage" *@
@*                          MaxFileSize="@(2 * 1024 * 1024)" *@
@*                          UploadPath="bars" *@
@*                          GenerateMetadata="@((_, _) => GenerateMetadataAsync())" *@
@*                          @bind-Value="context.Entity.StorageItem" *@
@*                          OnChange="@(storageItem => { Logger.LogInformation("File uploaded: {FileName}", storageItem?.FileName); return Task.CompletedTask;})"> *@
@*     </AntStorageFileInput> *@
@* </FormItem> *@
@* <FormItem Label="Multiple files"> *@
@*     <AntStorageFilesInput Storage="@Storage" *@
@*                           TValue="ValueCollection<StorageItem>" *@
@*                           MaxFileSize="@(2 * 1024 * 1024)" *@
@*                           MaxFiles="10" *@
@*                           UploadPath="bars" *@
@*                           GenerateMetadata="@((_, _) => GenerateMetadataAsync())" *@
@*                           @bind-Value="context.Entity.StorageItems" *@
@*                           OnChange="@(values => { Logger.LogInformation("Files uploaded: {Count}", values?.Count() ?? 0); return Task.CompletedTask;})"> *@
@*     </AntStorageFilesInput> *@
@* </FormItem> *@
@* <FormItem Label="Multiple files with custom upload button"> *@
@*     <AntStorageFilesInput Storage="@Storage" *@
@*                           TValue="ValueCollection<StorageItem>" *@
@*                           MaxFileSize="@(2 * 1024 * 1024)" *@
@*                           MaxFiles="10" *@
@*                           UploadPath="bars" *@
@*                           GenerateMetadata="@((_, _) => GenerateMetadataAsync())" *@
@*                           @bind-Value="context.Entity.StorageItems" *@
@*                           OnChange="@(values => { Logger.LogInformation("Files uploaded: {Count}", values?.Count() ?? 0); return Task.CompletedTask;})"> *@
@*         <CustomUploadButton Context="input"> *@
@*             <Button OnClick="@(_ => { input.SetValue(new ValueCollection<StorageItem> { context.Entity.StorageItem! }); })">Set items</Button> *@
@*         </CustomUploadButton> *@
@*     </AntStorageFilesInput> *@
@* </FormItem> *@
@* <FormItem Label="Multiple files with custom upload"> *@
@*     <AntStorageFilesInput Storage="@Storage" *@
@*                           TValue="ValueCollection<StorageItem>" *@
@*                           MaxFileSize="@(2 * 1024 * 1024)" *@
@*                           MaxFiles="10" *@
@*                           UploadPath="bars" *@
@*                           GenerateMetadata="@((_, _) => GenerateMetadataAsync())" *@
@*                           @bind-Value="context.Entity.StorageItems" *@
@*                           CustomUpload="@(_ => { return Task.FromResult(new ValueCollection<StorageItem> { context.Entity.StorageItem! }); })" *@
@*                           OnChange="@(values => { Logger.LogInformation("Files uploaded: {Count}", values?.Count() ?? 0); return Task.CompletedTask;})"> *@
@*     </AntStorageFilesInput> *@
@* </FormItem> *@
@* @foreach (var foo in context.Entity.Foos) *@
@* { *@
@*     <AntDesign.FormItem Label="Foo"> *@
@*         <AntDesign.Input @bind-Value="@foo.Foo"/> *@
@*     </AntDesign.FormItem> *@
@*     <Button OnClick="() => { context.Entity.Foos.Remove(foo); context.NotifyChange();}">Remove foo</Button> *@
@* } *@
@* <Button OnClick="() => context.AddFoo()">Add foo</Button> *@
@* <Button OnClick="() => context.AddFoo()">Set foo</Button> *@
@* <Button Disabled="@(!context.CanSave())" OnClick="@context.Save">Save</Button> *@
@* </BarForm> *@
@* <Button OnClick="async () => await frm.ResetAsync()">Reset</Button> *@
@* <Divider Text="Add form"></Divider> *@
@* <BarForm Layout="@FormLayout.Vertical"> *@
@*     <AntDesign.FormItem Label="Bar"> *@
@*         <AntDesign.Input @bind-Value="@context.Entity.Bar"/> *@
@*     </AntDesign.FormItem> *@
@*     @if (context.Entity.Foo is not null) *@
@*     { *@
@*         <AntDesign.FormItem Label="Foo"> *@
@*             <AntDesign.Input @bind-Value="@context.Entity.Foo.Foo"/> *@
@*         </AntDesign.FormItem> *@
@*         <Button OnClick="() => { context.Entity.Foo = null; context.NotifyChange();}">Remove foo</Button> *@
@*     } *@
@*     <Button OnClick="() => context.AddFoo()">Add foo</Button> *@
@*     <Button Disabled="@(!context.CanSave())" OnClick="@context.Save">Save</Button> *@
@* </BarForm> *@
@* </ChildContent> *@
@* </PageContainer> *@
