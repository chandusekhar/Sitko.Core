@page "/Logging"
@using Serilog.Events
@using Microsoft.Extensions.Logging
@using System.Threading
@using Microsoft.Extensions.Configuration
@using Sitko.Core.App.Logging
@inherits BaseComponent
@rendermode InteractiveServer
<AppPageLayout Title="Logging">
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => SetLevel(LogEventLevel.Debug))">Set debug</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="@(() => SetLevel(LogEventLevel.Information))">Set info</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="@(() => SetLevel(LogEventLevel.Warning))">Set warning</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => SetLevel(LogEventLevel.Error))">Set error</MudButton>
    <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="@(() => ResetLevel())">Reset</MudButton>

    @if (!string.IsNullOrEmpty(debugView))
    {
        <pre>
@debugView
</pre>
    }
</AppPageLayout>

@code
{
    private Task? logTask;
    private readonly CancellationTokenSource cts = new();
    private string? debugView;

    protected override void Initialize()
    {
        base.Initialize();
        logTask = StartLoggingAsync();
    }

    private async Task StartLoggingAsync()
    {
        while (!cts.IsCancellationRequested)
        {
            try
            {
                await Task.Delay(5000, cts.Token);
            }
            catch (OperationCanceledException)
            {
                break;
            }
            Logger.LogDebug("Debug");
            Logger.LogInformation("Info");
            Logger.LogWarning("Warning");
            Logger.LogError("Error");
        }
    }

    protected override async Task DisposeAsync(bool disposing)
    {
        if (logTask is not null)
        {
            await cts.CancelAsync();
            await logTask;
        }
        await base.DisposeAsync(disposing);
    }

    private Task SetLevel(LogEventLevel level)
    {
        SerilogDynamicConfigurationProvider.Instance.SetLevel(level);
        var root = (IConfigurationRoot)GetRequiredService<IConfiguration>();
        debugView = root.GetDebugView();
        return Task.CompletedTask;
    }

    private Task ResetLevel()
    {
        SerilogDynamicConfigurationProvider.Instance.ResetLevel();
        var root = (IConfigurationRoot)GetRequiredService<IConfiguration>();
        debugView = root.GetDebugView();
        return Task.CompletedTask;
    }
}
